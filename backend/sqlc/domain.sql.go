// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: domain.sql

package sqlc

import (
	"context"
)

const addDomain = `-- name: AddDomain :one
insert into vipDomain (id, domain_name, email_id)
values ($1, $2, $3)
returning id, domain_name, date_added, email_id
`

type AddDomainParams struct {
	ID         string `json:"id"`
	DomainName string `json:"domain_name"`
	EmailID    string `json:"email_id"`
}

func (q *Queries) AddDomain(ctx context.Context, arg AddDomainParams) (Vipdomain, error) {
	row := q.db.QueryRow(ctx, addDomain, arg.ID, arg.DomainName, arg.EmailID)
	var i Vipdomain
	err := row.Scan(
		&i.ID,
		&i.DomainName,
		&i.DateAdded,
		&i.EmailID,
	)
	return i, err
}

const deleteDomains = `-- name: DeleteDomains :exec
delete from vipDomain where email_id = $1
`

func (q *Queries) DeleteDomains(ctx context.Context, emailID string) error {
	_, err := q.db.Exec(ctx, deleteDomains, emailID)
	return err
}

const getDomains = `-- name: GetDomains :many
select id, domain_name, date_added, email_id from vipDomain where email_id = $1
`

func (q *Queries) GetDomains(ctx context.Context, emailID string) ([]Vipdomain, error) {
	rows, err := q.db.Query(ctx, getDomains, emailID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Vipdomain{}
	for rows.Next() {
		var i Vipdomain
		if err := rows.Scan(
			&i.ID,
			&i.DomainName,
			&i.DateAdded,
			&i.EmailID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
