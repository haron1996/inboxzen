// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: vipemails.sql

package sqlc

import (
	"context"
)

const addVipEmail = `-- name: AddVipEmail :one
insert into vipEmailAddress (id, vip_email_address, email_id)
values ($1, $2, $3)
returning id, vip_email_address, date_added, email_id
`

type AddVipEmailParams struct {
	ID              string `json:"id"`
	VipEmailAddress string `json:"vip_email_address"`
	EmailID         string `json:"email_id"`
}

func (q *Queries) AddVipEmail(ctx context.Context, arg AddVipEmailParams) (Vipemailaddress, error) {
	row := q.db.QueryRow(ctx, addVipEmail, arg.ID, arg.VipEmailAddress, arg.EmailID)
	var i Vipemailaddress
	err := row.Scan(
		&i.ID,
		&i.VipEmailAddress,
		&i.DateAdded,
		&i.EmailID,
	)
	return i, err
}

const deleteVipEmails = `-- name: DeleteVipEmails :exec
delete from vipEmailAddress where email_id = $1
`

func (q *Queries) DeleteVipEmails(ctx context.Context, emailID string) error {
	_, err := q.db.Exec(ctx, deleteVipEmails, emailID)
	return err
}

const getVipEmails = `-- name: GetVipEmails :many
select id, vip_email_address, date_added, email_id from vipEmailAddress where email_id = $1
`

func (q *Queries) GetVipEmails(ctx context.Context, emailID string) ([]Vipemailaddress, error) {
	rows, err := q.db.Query(ctx, getVipEmails, emailID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Vipemailaddress{}
	for rows.Next() {
		var i Vipemailaddress
		if err := rows.Scan(
			&i.ID,
			&i.VipEmailAddress,
			&i.DateAdded,
			&i.EmailID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
