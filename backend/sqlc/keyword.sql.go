// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: keyword.sql

package sqlc

import (
	"context"
)

const addKeyword = `-- name: AddKeyword :one
insert into vipKeyword (keyword, email_address)
values ($1, $2)
returning keyword, date_added, email_address
`

type AddKeywordParams struct {
	Keyword      string `json:"keyword"`
	EmailAddress string `json:"email_address"`
}

func (q *Queries) AddKeyword(ctx context.Context, arg AddKeywordParams) (Vipkeyword, error) {
	row := q.db.QueryRow(ctx, addKeyword, arg.Keyword, arg.EmailAddress)
	var i Vipkeyword
	err := row.Scan(&i.Keyword, &i.DateAdded, &i.EmailAddress)
	return i, err
}

const deleteKeywords = `-- name: DeleteKeywords :exec
delete from vipKeyword where email_address = $1
`

func (q *Queries) DeleteKeywords(ctx context.Context, emailAddress string) error {
	_, err := q.db.Exec(ctx, deleteKeywords, emailAddress)
	return err
}

const getKeywords = `-- name: GetKeywords :many
select keyword, date_added, email_address from vipKeyword where email_address = $1
`

func (q *Queries) GetKeywords(ctx context.Context, emailAddress string) ([]Vipkeyword, error) {
	rows, err := q.db.Query(ctx, getKeywords, emailAddress)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Vipkeyword{}
	for rows.Next() {
		var i Vipkeyword
		if err := rows.Scan(&i.Keyword, &i.DateAdded, &i.EmailAddress); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
