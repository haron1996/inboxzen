// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: delivery.sql

package sqlc

import (
	"context"
)

const deleteDeliveryTime = `-- name: DeleteDeliveryTime :one
delete from deliveryTime where id = $1 returning id, delivery_time, date_added, email_address
`

func (q *Queries) DeleteDeliveryTime(ctx context.Context, id string) (Deliverytime, error) {
	row := q.db.QueryRow(ctx, deleteDeliveryTime, id)
	var i Deliverytime
	err := row.Scan(
		&i.ID,
		&i.DeliveryTime,
		&i.DateAdded,
		&i.EmailAddress,
	)
	return i, err
}

const getDeliveryTimes = `-- name: GetDeliveryTimes :many
select id, delivery_time, date_added, email_address from deliveryTime where email_address = $1
`

func (q *Queries) GetDeliveryTimes(ctx context.Context, emailAddress string) ([]Deliverytime, error) {
	rows, err := q.db.Query(ctx, getDeliveryTimes, emailAddress)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Deliverytime{}
	for rows.Next() {
		var i Deliverytime
		if err := rows.Scan(
			&i.ID,
			&i.DeliveryTime,
			&i.DateAdded,
			&i.EmailAddress,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const setDeliveryTime = `-- name: SetDeliveryTime :one
insert into deliveryTime (id, delivery_time, email_address)
values ($1, $2, $3)
returning id, delivery_time, date_added, email_address
`

type SetDeliveryTimeParams struct {
	ID           string `json:"id"`
	DeliveryTime string `json:"delivery_time"`
	EmailAddress string `json:"email_address"`
}

func (q *Queries) SetDeliveryTime(ctx context.Context, arg SetDeliveryTimeParams) (Deliverytime, error) {
	row := q.db.QueryRow(ctx, setDeliveryTime, arg.ID, arg.DeliveryTime, arg.EmailAddress)
	var i Deliverytime
	err := row.Scan(
		&i.ID,
		&i.DeliveryTime,
		&i.DateAdded,
		&i.EmailAddress,
	)
	return i, err
}
